'number' + 3 + 3 // Результат: number33 (тип: string)
/*
1) 'number' + 3 = 'number3' — оскільки один з операндів є рядком, відбувається конкатенація рядка 'number' і числа 3;
2) 'number3' + 3 = 'number33'.
*/

null + 3 // Результат: 3 (тип: number)
/*
1) null при додаванні до числа перетворюється на 0;
2) 0 + 3 = 3.
*/

5 && "qwerty" // Результат: qwerty (тип: string)
/*
Оператор && перевіряє, чи обидва операнди є істинними (truthy). Якщо перший операнд істинний, повертається другий операнд.
5 — істинне значення, тому повертається другий операнд "qwerty". 
*/

+'40' + +'2' + "hillel"; // Результат: 42hillel (тип: string)
/*
1) оператор + перед рядком '40' перетворює його на число 40;
2) оператор + перед рядком '2' перетворює його на число 2;
3) 40 + 2 + "hillel" = 42 + "hillel";
4) відбувається конкатенація: 42 + "hillel" = '42hillel'.
*/

'10' - 5 === 6; // Результат: false (тип: boolean)
/*
1) оператор - перетворює '10' на число: 10 - 5 = 5;
2) 5 === 6 ⇒ false (строга рівність).
*/

true + false // Результат: 1 (тип: number)
/*
true перетворюється в 1, а false — в 0: 1 + 0 = 1.
*/

'4px' - 3 // Результат: NaN (тип: number)    
/*
1) рядок '4px' не може бути перетворено в число, тому результат буде NaN;
2) NaN - 3 = NaN.
JS може перетворити рядок в число, якщо він складається тільки з цифр!
*/

'4' - 3 // Результат: 1 (тип: number)
/*
рядок '4' перетворюється на число 4: 4 - 3 = 1.
- * / % виконують перетворення рядка на число, а + виконує конкатенацію!
*/

'6' + 3 ** 0; // Результат: 61 (тип: string)
/*
1) 3 ** 0 — це степінь: 3 в нульовій степені дає 1;
2) '6' + 1 = 61 - відбувається конкатенація рядка '6' і числа 1.
*/

12 / '6' // Результат: 2 (тип: number)
/*
'6' перетворюється на число 6 ⇒ 12 / 6 = 2.
*/

'10' + (5 === 6); // Результат: 10false (тип: string)
/*
1) 5 === 6 дає результат false;
2) '10' + false = 10false — відбувається конкатенація: '10' і 'false'.
*/

null == '' // Результат: false (тип: boolean)
/*
Оператор == виконує нестроге порівняння. null не дорівнює порожньому рядку. null - це відсутність значення, а '' - порожній рядок.
*/

3 ** (9 / 3); // Результат: 27 (тип: number)
/*
1) 9 / 3 = 3;
2) 3 ** 3 = 27 - просто приклад.
*/

!!'false' == !!'true' // Результат: true (тип: boolean)
/*
1) 'false' і 'true' — це непорожні рядки, вони обидва є істинними значеннями.
!!'false' = true, бо 'false' — непорожній рядок, тому !!'false' дає true.
!!'true' = true, бо 'true' — непорожній рядок, тому !!'true' дає true.
2) true == true дає результат true (нестроге порівняння).
 Будь-який рядок, крім порожнього, є істинним значенням (true)!
*/

0 || '0' && 1 // Результат: 1 (тип: number)
/*
1) Спочатку обчислюється оператор && - він має вищий пріоритет ніж ||. Він повертає останнє істинне значення, якщо обидва операнди істинні, інакше повертає перше хибне значення. 
'0' && 1 = 1, оскільки '0' — істинне значення, бо це непорожній рядок, і 1 - істинне значення => повертається останній операнд 1.
2) Оператор || повертає перше істинне значення або останнє, якщо всі значення хибні. 
0 — хибне значення (в JS 0 вважається false), 1 - істинне значення  ⇒ 0 || 1 = 1.
*/

(+null == false) < 1; // Результат: true (тип: boolean)
/*
1) Оператор + намагається перетворити null в число => перетворює null на 0; 
2) 0 == false: оператор == виконує автоматичне перетворення типів => false перетворюється на 0:
0 == 0 ⇒ true.
3) true < 1: оператор < перетворює true в число 1: 
1 < 1 ⇒ false.
*/

false && true || true // Результат: true (тип: boolean)
/*
1) false && true ⇒ false;
2) false || true ⇒ true.
*/

false && (false || true); // Результат: false (тип: boolean)
/*
1) Спочатку обчислюється вираз у дужках: false || true => true;
2) false && true ⇒ false.
*/

(+null == false) < 1 ** 5; // Результат: true (тип: boolean)
/*
1) +null ⇒ 0, і 0 == false ⇒ true;
2) 1 ** 5 = 1;
3) true < 1 ⇒ 1 < 1, що є false.
*/